{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/functions/functions.js"],"names":["window","sharedState","storeValue","sharedValue","getValue","add","first","second","clock","invocation","timer","setInterval","time","currentTime","setResult","onCanceled","clearInterval","Date","toLocaleTimeString","increment","incrementBy","result","logMessage","message","console","log"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFAA,MAAM,CAACC,WAAP,GAAqB,OAArB;AACA;;;;;;;AAMA,SAASC,UAAT,CAAoBC,WAApB,EAAiC;AAC7BH,QAAM,CAACC,WAAP,GAAqBE,WAArB;AACA,SAAO,cAAP;AACH;AAED;;;;;;;AAKA,SAASC,QAAT,GAAoB;AAChB,SAAOJ,MAAM,CAACC,WAAd;AACH;AAED;;;;;;;;;AAOA,SAASI,GAAT,CAAaC,KAAb,EAAoBC,MAApB,EAA4B;AAC1B,SAAOD,KAAK,GAAGC,MAAf;AACD;AAED;;;;;;;AAKA,SAASC,KAAT,CAAeC,UAAf,EAA2B;AACzB,MAAMC,KAAK,GAAGC,WAAW,CAAC,YAAM;AAC9B,QAAMC,IAAI,GAAGC,WAAW,EAAxB;AACAJ,cAAU,CAACK,SAAX,CAAqBF,IAArB;AACD,GAHwB,EAGtB,IAHsB,CAAzB;;AAKAH,YAAU,CAACM,UAAX,GAAwB,YAAM;AAC5BC,iBAAa,CAACN,KAAD,CAAb;AACD,GAFD;AAGD;AAED;;;;;;AAIA,SAASG,WAAT,GAAuB;AACrB,SAAO,IAAII,IAAJ,GAAWC,kBAAX,EAAP;AACD;AAED;;;;;;;;AAMA,SAASC,SAAT,CAAmBC,WAAnB,EAAgCX,UAAhC,EAA4C;AAC1C,MAAIY,MAAM,GAAG,CAAb;AACA,MAAMX,KAAK,GAAGC,WAAW,CAAC,YAAM;AAC9BU,UAAM,IAAID,WAAV;AACAX,cAAU,CAACK,SAAX,CAAqBO,MAArB;AACD,GAHwB,EAGtB,IAHsB,CAAzB;;AAKAZ,YAAU,CAACM,UAAX,GAAwB,YAAM;AAC5BC,iBAAa,CAACN,KAAD,CAAb;AACD,GAFD;AAGD;AAED;;;;;;;;AAMA,SAASY,UAAT,CAAoBC,OAApB,EAA6B;AAC3BC,SAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,SAAOA,OAAP;AACD","file":"functions.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/functions/functions.js\");\n","window.sharedState = \"empty\";\n/**\n* Saves a string value to shared state with the task pane\n* @customfunction STOREVALUE\n* @param {string} value String to write to shared state with task pane.\n* @return {string} A success value\n*/\nfunction storeValue(sharedValue) {\n    window.sharedState = sharedValue;\n    return \"value stored\";\n}\n\n/**\n* Gets a string value from shared state with the task pane\n* @customfunction GETVALUE\n* @returns {string} String value of the shared state with task pane.\n*/\nfunction getValue() {\n    return window.sharedState;\n}\n\n/**\n * Add two numbers\n * @customfunction \n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nfunction add(first, second) {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second\n * @customfunction \n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nfunction clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nfunction currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction \n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nfunction increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nfunction logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n"],"sourceRoot":""}